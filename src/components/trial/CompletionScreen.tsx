import React, { useEffect, useState } from 'react';
import { Box, Typography, Button, Card, CircularProgress, IconButton, Tooltip } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { calculateRating } from '../../firebase/service.tsx';
import { RatingCalculation } from '../../firebase/service.tsx';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import { Leaderboard } from '../leaderboard/Leaderboard';

interface CompletionScreenProps {
  participant: {
    sessionId: string;
    nickname: string;
    isTestSession: boolean;
  };
  sessionStats: {
    totalTrials: number;
    correctTrials: number;
    totalTimeMs: number;
  };
  canContinue: boolean;
  onNextRound: () => void;
  completedImages?: string[];
}

export const CompletionScreen: React.FC<CompletionScreenProps> = ({ participant, sessionStats, canContinue, onNextRound, completedImages }) => {
  const navigate = useNavigate();
  const [rating, setRating] = useState<RatingCalculation | null>(null);

  useEffect(() => {
    const calculateAndShowRating = async () => {
      try {
        console.log('Session stats:', sessionStats);
        const roundsCompleted = completedImages ? Math.floor(completedImages.length / 4) : 0;
        console.log('Rounds completed:', roundsCompleted);
        const rating = await calculateRating(
          sessionStats.totalTrials,
          sessionStats.correctTrials,
          sessionStats.totalTimeMs,
          roundsCompleted
        );
        console.log('Calculated rating:', rating);
        setRating(rating);
      } catch (error) {
        console.error('Error calculating rating:', error);
      }
    };

    calculateAndShowRating();
  }, [sessionStats, completedImages]);

  if (!rating) return null;
  console.log('Rendering with rating:', rating);

  const StatCard = ({ title, icon, score, maxScore, color, description }: { 
    title: string; 
    icon: React.ReactNode; 
    score: number; 
    maxScore: number;
    color: string;
    description: string;
  }) => (
    <Card sx={{ 
      width: { xs: 105, sm: 160 }, 
      height: { xs: 160, sm: 180 }, 
      display: 'flex', 
      flexDirection: 'column', 
      alignItems: 'center', 
      justifyContent: 'flex-start',
      p: { xs: 1, sm: 2 },
      pt: { xs: 2, sm: 3 },
      m: 0.5,
      position: 'relative'
    }}>
      <Box sx={{ position: 'relative', mb: 2, width: { xs: 45, sm: 60 }, height: { xs: 45, sm: 60 }, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <CircularProgress
          variant="determinate"
          value={100}
          size={45}
          thickness={3}
          sx={{ color: 'grey.200', position: 'absolute' }}
        />
        <CircularProgress
          variant="determinate"
          value={title === "–ë–æ–Ω—É—Å" ? bonusPercent : (isNaN(score) ? 0 : (score / maxScore) * 100)}
          size={45}
          thickness={3}
          sx={{ color, position: 'absolute' }}
        />
        <Box sx={{
          position: 'absolute',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          height: '100%'
        }}>
          {React.cloneElement(icon as React.ReactElement, { 
            sx: { 
              fontSize: { xs: 24, sm: 30 },
              color: (icon as React.ReactElement).props.sx?.color 
            } 
          })}
        </Box>
      </Box>
      <Typography variant="subtitle2" align="center" gutterBottom sx={{ fontSize: { xs: '0.8rem', sm: '0.875rem' }, mb: 1.5, minHeight: '1rem' }}>
        {title}
      </Typography>
      <Typography variant="h6" align="center" sx={{ color, fontSize: { xs: '1rem', sm: '1.25rem' }, mb: 1.5, minHeight: '1.5rem' }}>
        {title === "–ë–æ–Ω—É—Å" ? `√ó${isNaN(score) ? '0' : Math.round(score * 100)}%` : (isNaN(score) ? '0' : score)}
      </Typography>
      <Typography 
        variant="caption" 
        align="center" 
        color="text.secondary"
        sx={{ 
          whiteSpace: 'pre-line',
          lineHeight: 1.2,
          fontSize: { xs: '0.6rem', sm: '0.75rem' },
          minHeight: '2rem'
        }}
      >
        {title === "–ë–æ–Ω—É—Å" ? 
          `–∑–∞ ${rating.roundsCompleted} –∏–∑ ${maxBonusRounds} —Ä–∞—É–Ω–¥–æ–≤\n(+10% –∑–∞ —Ä–∞—É–Ω–¥)` : 
          description}
      </Typography>
    </Card>
  );

  // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–∞—É–Ω–¥—ã (20 = 100%)
  const maxBonusRounds = 20;
  const bonusScore = Math.round((rating.roundBonus - 1) * 100);
  const bonusPercent = (rating.roundsCompleted / maxBonusRounds) * 100;

  return (
    <Box sx={{ 
      height: '100dvh',
      display: 'flex',
      flexDirection: 'column',
      bgcolor: 'grey.100',
      p: { xs: 2, sm: 3 }
    }}>
      <Typography variant="h5" gutterBottom align="center">
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞
      </Typography>

      <Box sx={{ 
        display: 'flex', 
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        gap: 1,
        my: 2,
        flexWrap: 'nowrap'
      }}>
        <StatCard
          title="–í—Ä–µ–º—è"
          icon={<AccessTimeIcon sx={{ fontSize: 30, color: 'primary.main' }} />}
          score={rating.timeScore}
          maxScore={15}
          color="primary.main"
          description={`–∏–∑ 15 –±–∞–ª–ª–æ–≤\n${Math.round(rating.actualTime / 1000)}—Å / ${Math.round(rating.theoreticalMinTime / 1000)}—Å`}
        />
        <StatCard
          title="–¢–æ—á–Ω–æ—Å—Ç—å"
          icon={<CheckCircleIcon sx={{ fontSize: 30, color: 'success.main' }} />}
          score={Math.round(rating.accuracyMultiplier * 85)}
          maxScore={85}
          color="success.main"
          description={`–∏–∑ 85 –±–∞–ª–ª–æ–≤\n${Math.round(rating.accuracy)}% –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤`}
        />
        <StatCard
          title="–ë–æ–Ω—É—Å"
          icon={<EmojiEventsIcon sx={{ fontSize: 30, color: 'warning.main' }} />}
          score={Math.round(rating.roundBonus * 100) / 100}
          maxScore={4}
          color="warning.main"
          description={`–∑–∞ ${rating.roundsCompleted} –∏–∑ ${maxBonusRounds} —Ä–∞—É–Ω–¥–æ–≤\n(+10% –∑–∞ —Ä–∞—É–Ω–¥)`}
        />
      </Box>

      <Typography variant="h4" align="center" sx={{ my: 3 }}>
        –°—á—ë—Ç –∑–∞ —Ä–∞—É–Ω–¥: {isNaN(rating.finalScore) ? '0' : rating.finalScore}
      </Typography>

      {canContinue && (
        <>
          <Typography variant="body2" color="text.secondary" align="center" sx={{ mb: 1 }}>
            –ü—Ä–æ–π–¥–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {completedImages ? Math.floor(completedImages.length / 4) : 0} –∏–∑ 20
          </Typography>
          <Typography variant="body1" color="primary" align="center" sx={{ mb: 2 }}>
            –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥! –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–∞—à –±–æ–Ω—É—Å –µ—â—ë –Ω–∞ 10%
          </Typography>
          <Button
            variant="contained"
            onClick={onNextRound}
            fullWidth
            sx={{ mb: 3 }}
          >
            –ò–≥—Ä–∞—Ç—å –µ—â—ë
          </Button>
        </>
      )}

      {!canContinue && !participant.isTestSession && (
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2, my: 3 }}>
          <Typography variant="h6" color="success.main" align="center">
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ä–∞—É–Ω–¥—ã! üéâ
          </Typography>
          <Button
            variant="contained"
            color="primary"
            onClick={() => navigate('/explanation')}
            sx={{ minWidth: 250 }}
          >
            –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ
          </Button>
        </Box>
      )}

      {!participant.isTestSession && (
        <>
          <Box sx={{ mb: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mb: 1 }}>
              <Typography variant="body1" color="text.secondary">
                –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
              </Typography>
              <Tooltip title={
                <Box sx={{ p: 1 }}>
                  <Typography variant="body2">
                    –ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—á—ë—Ç –∑–∞ —Ä–∞—É–Ω–¥:
                    <br/><br/>
                    ‚Ä¢ <b>–¢–æ—á–Ω–æ—Å—Ç—å</b> (–¥–æ 85 –±–∞–ª–ª–æ–≤)
                    <br/>–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—á—ë—Ç –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ. 
                    <br/>–ü—Ä–∏–º–µ—Ä: 90% = 0.9¬≤ √ó 85 ‚âà 69 –±–∞–ª–ª–æ–≤
                    <br/><br/>
                    ‚Ä¢ <b>–í—Ä–µ–º—è</b> (–¥–æ 15 –±–∞–ª–ª–æ–≤)
                    <br/>–ß–µ–º –±–ª–∏–∂–µ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (1.5—Å –Ω–∞ —Å–ª–æ–≤–æ), —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤
                    <br/><br/>
                    ‚Ä¢ <b>–ë–æ–Ω—É—Å –∑–∞ —Ä–∞—É–Ω–¥—ã</b>
                    <br/>–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç –Ω–∞ 10% –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥:
                    <br/>1 —Ä–∞—É–Ω–¥: √ó1.1, 2 —Ä–∞—É–Ω–¥–∞: √ó1.2, 3 —Ä–∞—É–Ω–¥–∞: √ó1.3 –∏ —Ç.–¥.
                    <br/><br/>
                    ‚Ä¢ <b>–†–µ–π—Ç–∏–Ω–≥ –≤ —Ç–∞–±–ª–∏—Ü–µ</b>
                    <br/>–í —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω —Å—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —Ä–∞—É–Ω–¥–∞–º
                  </Typography>
                </Box>
              }>
                <HelpOutlineIcon 
                  sx={{ 
                    fontSize: 20,
                    color: 'text.secondary',
                    cursor: 'help'
                  }} 
                />
              </Tooltip>
            </Box>
            <Typography variant="body2" color="text.secondary">
              –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            </Typography>
          </Box>

          <Leaderboard 
            currentUserNickname={participant.nickname} 
            sx={{
              '.current-user': {
                bgcolor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          />
        </>
      )}

      <Box sx={{ mt: 'auto', display: 'flex', flexDirection: 'column', gap: 1 }}>
        {!canContinue && !participant.isTestSession && (
          <Typography sx={{ mt: 2, color: 'success.main' }}>
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ä–∞—É–Ω–¥—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —Ç–µ–º–∏ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
          </Typography>
        )}
        <Button
          variant="outlined"
          onClick={() => navigate('/')}
          fullWidth
        >
          –í –Ω–∞—á–∞–ª–æ
        </Button>
      </Box>
    </Box>
  );
}; 