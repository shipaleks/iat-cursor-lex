import React, { useEffect, useState } from 'react';
import { Box, Typography, Button, Card, CircularProgress, IconButton, Tooltip } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { calculateRating, getParticipantProgress } from '../../firebase/service.tsx';
import { RatingCalculation, Participant as ParticipantType, TrialResult, LeaderboardEntry as LeaderboardEntryType } from '../../types';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import { Leaderboard } from '../leaderboard/Leaderboard';
import { auth } from '../../firebase/config.tsx';

interface CompletionScreenProps {
  participant: {
    sessionId: string;
    nickname: string;
    isTestSession: boolean;
    userId: string;
  };
  sessionStats: {
    totalTrials: number;
    correctTrials: number;
    totalTimeMs: number;
  };
  onNextRound: () => void;
  completedImages?: string[];
}

export const CompletionScreen: React.FC<CompletionScreenProps> = ({ participant, sessionStats, onNextRound, completedImages }) => {
  const navigate = useNavigate();
  const [rating, setRating] = useState<RatingCalculation | null>(null);
  const [refreshTime, setRefreshTime] = useState(Date.now()); // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞
  const refreshRating = () => {
    console.log('[CompletionScreen] Refreshing rating data');
    setRefreshTime(Date.now());
  };

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const interval = setInterval(() => {
      refreshRating();
    }, 2000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const calculateAndShowRating = async () => {
      try {
        console.log('[CompletionScreen] Calculating rating, stats:', sessionStats);
        console.log('[CompletionScreen] Completed images:', {
          –∏–º–µ–µ—Ç—Å—è: completedImages !== undefined,
          –¥–ª–∏–Ω–∞: completedImages?.length || 0,
          –ø—Ä–∏–º–µ—Ä–°–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: completedImages?.slice(0, 3)
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
        let roundsCompleted = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1
        
        if (participant && participant.userId) {
          try {
            const progress = await getParticipantProgress(participant.userId);
            if (progress && progress.totalSessions) {
              roundsCompleted = Math.max(1, progress.totalSessions);
              console.log(`[CompletionScreen] –†–ê–°–ß–ï–¢ –†–ê–£–ù–î–û–í –ù–ê –§–ò–ù–ê–õ–¨–ù–û–ú –≠–ö–†–ê–ù–ï:`);
              console.log(`  - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${participant.userId}`);
              console.log(`  - –ù–∏–∫–Ω–µ–π–º: ${participant.nickname}`);
              console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –ë–î: ${progress.totalSessions}`);
              console.log(`  - –ò—Ç–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞: ${roundsCompleted}`);
            }
          } catch (error) {
            console.error('[CompletionScreen] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
          }
        }
        
        const rating = await calculateRating(
          sessionStats.totalTrials,
          sessionStats.correctTrials,
          sessionStats.totalTimeMs,
          roundsCompleted
        );
        console.log('[CompletionScreen] –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(rating, null, 2));
        setRating(rating);
      } catch (error) {
        console.error('[CompletionScreen] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      }
    };

    calculateAndShowRating();
  }, [sessionStats, completedImages, participant, refreshTime]); // –î–æ–±–∞–≤–ª—è–µ–º refreshTime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

  if (!rating) return null;
  console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º:', rating);

  const StatCard = ({ title, icon, score, maxScore, color, description }: { 
    title: string; 
    icon: React.ReactNode; 
    score: number; 
    maxScore: number;
    color: string;
    description: string;
  }) => (
    <Card sx={{ 
      width: { xs: 105, sm: 160 }, 
      height: { xs: 160, sm: 180 }, 
      display: 'flex', 
      flexDirection: 'column', 
      alignItems: 'center', 
      justifyContent: 'flex-start',
      p: { xs: 1, sm: 2 },
      pt: { xs: 2, sm: 3 },
      m: 0.5,
      position: 'relative',
      bgcolor: 'background.paper',
      boxShadow: (theme) => theme.palette.mode === 'dark' ? '0 4px 20px rgba(0, 0, 0, 0.5)' : '0 2px 8px rgba(0, 0, 0, 0.1)'
    }}>
      <Box sx={{ position: 'relative', mb: 2, width: { xs: 45, sm: 60 }, height: { xs: 45, sm: 60 }, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <CircularProgress
          variant="determinate"
          value={100}
          size={45}
          thickness={3}
          sx={{ color: 'grey.800', position: 'absolute' }}
        />
        <CircularProgress
          variant="determinate"
          value={title === "–ë–æ–Ω—É—Å" ? bonusPercent : (isNaN(score) ? 0 : (score / maxScore) * 100)}
          size={45}
          thickness={3}
          sx={{ color, position: 'absolute' }}
        />
        <Box sx={{
          position: 'absolute',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          height: '100%'
        }}>
          {React.cloneElement(icon as React.ReactElement, { 
            sx: { 
              fontSize: { xs: 24, sm: 30 },
              color: (icon as React.ReactElement).props.sx?.color 
            } 
          })}
        </Box>
      </Box>
      <Typography variant="subtitle2" align="center" gutterBottom sx={{ fontSize: { xs: '0.8rem', sm: '0.875rem' }, mb: 1.5, minHeight: '1rem' }}>
        {title}
      </Typography>
      <Typography variant="h6" align="center" sx={{ color, fontSize: { xs: '1rem', sm: '1.25rem' }, mb: 1.5, minHeight: '1.5rem' }}>
        {title === "–ë–æ–Ω—É—Å" ? `√ó${Math.round(score * 100)}%` : (isNaN(score) ? '0' : score)}
      </Typography>
      <Typography 
        variant="caption" 
        align="center" 
        color="text.secondary"
        sx={{ 
          whiteSpace: 'pre-line',
          lineHeight: 1.2,
          fontSize: { xs: '0.6rem', sm: '0.75rem' },
          minHeight: '2rem'
        }}
      >
        {title === "–ë–æ–Ω—É—Å" ? 
          `–†–∞—É–Ω–¥ ${rating.roundsCompleted}\n(+${(rating.roundsCompleted - 1) * 5}%)` : 
          description}
      </Typography>
    </Card>
  );

  // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–∞—É–Ω–¥—ã
  const maxBonusRounds = 20;
  const bonusPercent = Math.min(100, rating.roundsCompleted * 5); // 20 —Ä–∞—É–Ω–¥–æ–≤ = 100%

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –±–æ–Ω—É—Å–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
  const bonusPercentForProgress = Math.min(100, (rating.bonusPercentage - 100) / 1.25); // ( —Ç–µ–∫_–±–æ–Ω—É—Å - 100 ) / 125 * 100

  return (
    <Box sx={{ 
      height: '100dvh',
      display: 'flex',
      flexDirection: 'column',
      bgcolor: 'background.default',
      p: { xs: 2, sm: 3 }
    }}>
      <Typography variant="h5" gutterBottom align="center" color="text.primary">
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞
      </Typography>

      <Box sx={{ 
        display: 'flex', 
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        gap: 1,
        my: 2,
        flexWrap: 'nowrap'
      }}>
        <StatCard
          title="–í—Ä–µ–º—è"
          icon={<AccessTimeIcon sx={{ fontSize: 30, color: 'primary.main' }} />}
          score={rating.timeScore}
          maxScore={15}
          color="primary.main"
          description={`–∏–∑ 15 –±–∞–ª–ª–æ–≤\n${Math.round(rating.actualTime / 1000)}—Å / ${Math.round(rating.theoreticalMinTime / 1000)}—Å`}
        />
        <StatCard
          title="–¢–æ—á–Ω–æ—Å—Ç—å"
          icon={<CheckCircleIcon sx={{ fontSize: 30, color: 'success.main' }} />}
          score={Math.round(rating.accuracyMultiplier * 85)}
          maxScore={85}
          color="success.main"
          description={`${sessionStats.correctTrials} –∏–∑ ${sessionStats.totalTrials} (${Math.round(rating.accuracy)}%)`}
        />
        <StatCard
          title="–ë–æ–Ω—É—Å"
          icon={<EmojiEventsIcon sx={{ fontSize: 30, color: 'warning.main' }} />}
          score={rating.roundBonus}
          maxScore={3}
          color="warning.main"
          description={`–†–∞—É–Ω–¥ ${rating.roundsCompleted}\n(+${(rating.roundsCompleted - 1) * 5}%)`}
        />
      </Box>

      <Typography variant="h4" align="center" sx={{ my: 3 }}>
        –°—á—ë—Ç –∑–∞ —Ä–∞—É–Ω–¥: {isNaN(rating.finalScore) ? '0' : rating.finalScore}
      </Typography>

      {participant.isTestSession ? (
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2, my: 3 }}>
          <Typography variant="h6" color="primary" align="center">
            –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—É–Ω–¥! üéâ
          </Typography>
          <Typography color="text.secondary" align="center">
            –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –∏–≥—Ä—É, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã
          </Typography>
        </Box>
      ) : (
        <>
          <Typography variant="body2" color="text.secondary" align="center" sx={{ mb: 1 }}>
            –ü—Ä–æ–π–¥–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {rating.roundsCompleted} –∏–∑ 25
          </Typography>
          
          <Typography variant="body1" color="primary" align="center" sx={{ mb: 2 }}>
            –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å! –° –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º –≤–∞—à –±–æ–Ω—É—Å —Ä–∞—Å—Ç—ë—Ç –Ω–∞ 5% (–¥–æ 25 —Ä–∞—É–Ω–¥–∞)
          </Typography>
          <Button
            variant="contained"
            onClick={onNextRound}
            fullWidth
            sx={{ mb: 3 }}
          >
            –ò–≥—Ä–∞—Ç—å –µ—â—ë
          </Button>
        </>
      )}

      {!participant.isTestSession && (
        <>
          <Box sx={{ mb: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mb: 1 }}>
              <Typography variant="body1" color="text.secondary">
                –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
              </Typography>
              <Tooltip title={
                <Box sx={{ p: 1 }}>
                  <Typography variant="body2">
                    –ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—á—ë—Ç –∑–∞ —Ä–∞—É–Ω–¥:
                    <br/><br/>
                    ‚Ä¢ <b>–¢–æ—á–Ω–æ—Å—Ç—å</b> (–¥–æ 85 –±–∞–ª–ª–æ–≤)
                    <br/>–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—á—ë—Ç –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ. 
                    <br/>–ü—Ä–∏–º–µ—Ä: 90% = 0.9¬≤ √ó 85 ‚âà 69 –±–∞–ª–ª–æ–≤
                    <br/><br/>
                    ‚Ä¢ <b>–í—Ä–µ–º—è</b> (–¥–æ 15 –±–∞–ª–ª–æ–≤)
                    <br/>–ß–µ–º –±–ª–∏–∂–µ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (1.5—Å –Ω–∞ —Å–ª–æ–≤–æ), —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤
                    <br/><br/>
                    ‚Ä¢ <b>–ë–æ–Ω—É—Å –∑–∞ —Ä–∞—É–Ω–¥—ã</b>
                    <br/>–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç –Ω–∞ 5% –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥ (–º–∞–∫—Å–∏–º—É–º 25 —Ä–∞—É–Ω–¥–æ–≤, +125%):
                    <br/>1 —Ä–∞—É–Ω–¥: √ó1.05 (105%), 2 —Ä–∞—É–Ω–¥–∞: √ó1.10 (110%), ..., 25+ —Ä–∞—É–Ω–¥–æ–≤: √ó2.25 (225%)
                    <br/><br/>
                    ‚Ä¢ <b>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</b>
                    <br/>–í —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –Ω–∞ —Å–ª–æ–≤–∞—Ö –∏ –Ω–µ-—Å–ª–æ–≤–∞—Ö).
                    <br/>–≠—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–≤—Å–µ–≥–æ) –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –∫–∞—Ä—Ç–æ—á–∫–µ.
                    <br/>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞–∂–∏–º–∞—Ç—å "–°–ª–æ–≤–æ", —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç ‚âà50% (100% –Ω–∞ —Å–ª–æ–≤–∞—Ö, 0% –Ω–∞ –Ω–µ-—Å–ª–æ–≤–∞—Ö).
                    <br/><br/>
                    ‚Ä¢ <b>–†–µ–π—Ç–∏–Ω–≥ –≤ —Ç–∞–±–ª–∏—Ü–µ</b>
                    <br/>–í —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω —Å—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —Ä–∞—É–Ω–¥–∞–º
                  </Typography>
                </Box>
              }>
                <HelpOutlineIcon 
                  sx={{ 
                    fontSize: 20,
                    color: 'text.secondary',
                    cursor: 'help'
                  }} 
                />
              </Tooltip>
            </Box>
            <Typography variant="body2" color="text.secondary">
              –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            </Typography>
          </Box>

          <Leaderboard 
            currentUserNickname={participant.nickname.toLowerCase()} 
            sx={{
              '.current-user': {
                bgcolor: 'primary.light',
                color: 'primary.contrastText'
              }
            }}
          />
        </>
      )}

      <Box sx={{ mt: 'auto', display: 'flex', flexDirection: 'column', gap: 1 }}>
        <Button
          variant="outlined"
          onClick={() => window.location.href = '/'}
          fullWidth
        >
          {participant.isTestSession ? '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' : '–í –Ω–∞—á–∞–ª–æ'}
        </Button>
      </Box>
    </Box>
  );
}; 