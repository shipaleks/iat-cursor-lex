import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const CSV_PATH = path.resolve(__dirname, '../public/data/exp2_samples.csv');
const MANUAL_PAIRS_PATH = path.resolve(__dirname, '../src/data/manualPairs.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞
function parseCSV(text) {
  const rows = [];
  let row = [];
  let cell = '';
  let inQuotes = false;
  
  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    
    if (char === '"') {
      if (i + 1 < text.length && text[i + 1] === '"') {
        cell += '"';
        i++;
      } else {
        inQuotes = !inQuotes;
      }
    } else if (char === ',' && !inQuotes) {
      row.push(cell);
      cell = '';
    } else if ((char === '\n' || char === '\r') && !inQuotes) {
      if (char === '\r' && i + 1 < text.length && text[i + 1] === '\n') {
        i++;
      }
      
      if (cell !== '' || row.length > 0) {
        row.push(cell);
        rows.push(row);
        row = [];
        cell = '';
      }
    } else {
      cell += char;
    }
  }
  
  if (cell !== '' || row.length > 0) {
    row.push(cell);
    rows.push(row);
  }
  
  return rows;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
function normalizePrompt(prompt) {
  return prompt.trim().replace(/\s+/g, ' ');
}

async function main() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    const csvText = fs.readFileSync(CSV_PATH, 'utf8');
    const manualPairs = JSON.parse(fs.readFileSync(MANUAL_PAIRS_PATH, 'utf8'));
    
    // –ü–∞—Ä—Å–∏–Ω–≥ CSV
    const csvRows = parseCSV(csvText);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const csvHeaders = csvRows[0];
    const promptIndex = csvHeaders.findIndex(h => h.trim() === 'prompt');
    const modelIndex = csvHeaders.findIndex(h => h.trim() === 'model_name');
    const fileNameIndex = csvHeaders.findIndex(h => h.trim() === 'file_name');
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const promptByFile = {};
    const modelByFile = {};
    const filesByPrompt = {};
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    for (let i = 1; i < csvRows.length; i++) {
      const row = csvRows[i];
      if (row.length <= Math.max(promptIndex, modelIndex, fileNameIndex)) {
        continue;
      }
      
      const prompt = normalizePrompt(row[promptIndex]);
      const model = row[modelIndex].trim();
      const fileName = row[fileNameIndex].trim();
      
      if (prompt && model && fileName) {
        promptByFile[fileName] = prompt;
        modelByFile[fileName] = model;
        
        if (!filesByPrompt[prompt]) {
          filesByPrompt[prompt] = [];
        }
        filesByPrompt[prompt].push(fileName);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä
    console.log('\n–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä —Ñ–∞–π–ª–æ–≤:');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalFiles = Object.keys(promptByFile).length;
    const v8Files = Object.entries(modelByFile).filter(([_, model]) => model === 'v8_latent_finetune').length;
    const v10Files = Object.entries(modelByFile).filter(([_, model]) => model === 'v10_rl_09_lcm_lora_s8r64').length;
    
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
    console.log(`–§–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ v8_latent_finetune: ${v8Files}`);
    console.log(`–§–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ v10_rl_09_lcm_lora_s8r64: ${v10Files}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const missingPairs = [];
    const manualPairFiles = Object.keys(manualPairs);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const findAssociatedFile = (fileName) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –ø–∞—Ä—ã
      if (manualPairs[fileName]) {
        return manualPairs[fileName];
      }
      
      // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –ø—Ä–æ–º–ø—Ç—É
      const prompt = promptByFile[fileName];
      if (!prompt) return null;
      
      const files = filesByPrompt[prompt] || [];
      const currentModel = modelByFile[fileName];
      
      // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª —Å —Ç–µ–º –∂–µ –ø—Ä–æ–º–ø—Ç–æ–º, –Ω–æ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é
      return files.find(file => 
        file !== fileName && modelByFile[file] !== currentModel
      );
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    Object.keys(promptByFile).forEach(fileName => {
      const associatedFile = findAssociatedFile(fileName);
      
      if (!associatedFile) {
        missingPairs.push({
          fileName,
          model: modelByFile[fileName],
          prompt: promptByFile[fileName]?.substring(0, 50) + '...'
        });
      }
    });
    
    // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –ø–∞—Ä
    if (missingPairs.length > 0) {
      console.log(`\n–§–∞–π–ª—ã –±–µ–∑ –ø–∞—Ä (${missingPairs.length}):`);
      missingPairs.forEach(({ fileName, model, prompt }) => {
        console.log(`${fileName} (${model}): "${prompt}"`);
      });
    } else {
      console.log('\n–í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã! üëç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä
    console.log(`\n–í—Ä—É—á–Ω—É—é –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (${manualPairFiles.length}):`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏
    const processedPairs = new Set();
    
    manualPairFiles.forEach(file1 => {
      const file2 = manualPairs[file1];
      const pairKey = [file1, file2].sort().join('|');
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É –ø–∞—Ä—É
      if (processedPairs.has(pairKey)) return;
      processedPairs.add(pairKey);
      
      console.log(`${file1} (${modelByFile[file1] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}) <-> ${file2} (${modelByFile[file2] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏
      if (!manualPairs[file2] || manualPairs[file2] !== file1) {
        console.log(`  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è ${file2} -> ${file1}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      if (!promptByFile[file1]) {
        console.log(`  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª ${file1} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö CSV`);
      }
      if (!promptByFile[file2]) {
        console.log(`  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª ${file2} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö CSV`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
      if (modelByFile[file1] && modelByFile[file2] && modelByFile[file1] === modelByFile[file2]) {
        console.log(`  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª—ã ${file1} –∏ ${file2} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ ${modelByFile[file1]}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
      const prompt1 = promptByFile[file1];
      const prompt2 = promptByFile[file2];
      
      if (prompt1 && prompt2) {
        const samePrompt = normalizePrompt(prompt1) === normalizePrompt(prompt2);
        
        if (!samePrompt) {
          console.log(`  ‚ö†Ô∏è –û–®–ò–ë–ö–ê: –ü—Ä–æ–º–ø—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è:`);
          console.log(`    ${file1}: "${prompt1?.substring(0, 50)}..."`);
          console.log(`    ${file2}: "${prompt2?.substring(0, 50)}..."`);
        }
      }
    });
    
    console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    process.exit(1);
  }
}

main(); 